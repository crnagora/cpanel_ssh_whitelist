<?php

class Nemj_Whitelist
{

    const HOSTS_PATH = '/etc/hosts.allow';
    const ADMIN_PATH = '/etc/admin.hosts.allow';
    const SSH_CONF = '/etc/ssh/sshd_config';
    const ALL_PATH = '/usr/local/cpanel/base/frontend/paper_lantern/nemj_whitelist/.all.hosts.allow';


    protected $userPath = null;

    protected $cpanel = null;

    public function __construct($cpanel)
    {
        $processUser = posix_getpwuid(posix_geteuid());
        $user = $processUser['name'];
        $this->cpanel = $cpanel;

        $this->userPath = "/home/$user/.users.allow";
    }

    public function getSshPort()
    {
    $ssh_config = file_get_contents(SSH_CONF);
    
    preg_match('/Port (?P<digit>\d+)/', $ssh_config, $out);
    $port=intval(($out[1]));
    if ($port == 0) {
        $this->notValidPort();
            return false;
    }
    else {
        return $port;
        }
    }
    public function getIps()
    {
        if (is_file($this->userPath)) {
            $hosts = file_get_contents($this->userPath);
            $ips = array();
            $d = explode("\n", $hosts);

            foreach ($d as $v) {
                if ($v !== '') {
                    list($l, $i) = explode(':', $v);
                    $ips[] = array($l => $i);
                }
            }
            return $ips;
        } else {
            return null;
        }
    }

    public function addIp($label, $ip)
    {
        $label = urldecode($label);
        $hosts = '';
        $path = $this->userPath;

        if (!$this->isIp($ip)) {
            $this->notValidError();
            return false;
        }

	$port = $this->getSshPort();
	if(!$port) {
	return false; 
	}
	exec("nft add rule filter INPUT ip saddr ".$ip." tcp dport ".$port." accept");

        if (is_file($this->userPath)) {
            $hosts = file_get_contents($path);
        } else {
            $this->cpanel->uapi(
                'NemjWhitelist', 'write_hosts',
                array(
                    'path' => $path,
                    'hosts' => ''
                )
            );
        }

        if (strpos($hosts, $ip)) {
            $this->duplicateError();
            return;
        }

        $h = explode("\n", $hosts);
        $h[] = $label . ":" . $ip;
        $h = array_filter($h);

        $user_allow = implode("\n", $h);

        $this->cpanel->uapi(
            'NemjWhitelist', 'write_hosts',
            array(
                'path' => $path,
                'hosts' => $user_allow
            )
        );

        $this->writeHosts($ip, false);

    }

    public function isIp($ip = null)
    {
        if (!$ip or strlen(trim($ip)) == 0) {
            return false;
        }

        $ip = trim($ip);
        if (preg_match("/^[0-9]{1,3}(.[0-9]{1,3}){3}$/", $ip)) {
            foreach (explode(".", $ip) as $block) {
                if ($block < 0 || $block > 255) {
                    return false;
                }
            }
            return true;
        }
        return false;
    }

    public function removeIp($ip)
    {
        $path = $this->userPath;

	$port = $this->getSshPort();
	if(!$port) {
	return false; 
	}
	$chain=exec("nft --handle --numeric list chain filter INPUT|grep \"ip saddr ".$ip." tcp dport ".$port." accept\"|awk '{print $10}'");
	if(intval($chain) > 0 ) {
	exec("nft delete rule ip filter INPUT handle ".$chain);
	}
	else {
	return false;
	}

        if (is_file($this->userPath)) {
            $hosts = file_get_contents($this->userPath);
        }

	$h = explode("\n", $hosts);

        $h = array_filter(
            $h, function ($e) use ($ip) {
                return (!strpos($e, $ip));
            }
        );

        $user_allow = implode("\n", $h);

        $this->cpanel->uapi(
            'NemjWhitelist', 'write_hosts',
            array(
                'path' => $path,
                'hosts' => $user_allow
            )
        );

        $this->writeHosts($ip, true);
    }

    protected function writeHosts($ip, $flag = false)
    {
        $admin = '';
        $path = self::HOSTS_PATH;

        if (file_exists($path)) {
            $all = file_get_contents($path);
            $e = explode("\n", $all);
            $len = $index = count($e);
            $f = $ff = false;

            foreach ($e as $k=>$v) {
                if (strpos($v, '# User Allows') !== false) {
                    $index = $k;
                } 
                if ($k > $index) {
                    if ($flag === true && $f === false) {
                        if(strpos($v, $ip) !== false) {
                            unset($e[$k]);
                            $f = true;
                        }
                    }
                }
                if (strpos($v, 'sshd : all : deny') !== false) {
                    unset($e[$k]);
                }
            }
        }
        
        $hosts_allow = "# This file is autogenerated by Cpanel Plugin\n";
        $hosts_allow .= "# Any changes will be overwritten\n\n";
        $hosts_allow .= "# Admin Allows\n";

        for ($i = 0; $i < $index; $i++) {
            if ($e[$i] !== '' && strpos($e[$i], '#') === false) {
                $hosts_allow .= $e[$i] . "\n";
            }
        }

        $hosts_allow .= "# for Admin insert above this line\n";
        $hosts_allow .= "# User Allows\n";

        for ($i = $index; $i < $len - 1; $i++) {
            if ($e[$i] !== '' && strpos($e[$i], '#') === false) {
                $hosts_allow .= $e[$i] . "\n";
            }
        }

        if ($flag === false) {
            $hosts_allow .= "sshd : $ip : allow\n";
        }

        $hosts_allow .= "sshd : all : deny\n";

        

        $this->cpanel->uapi(
            'NemjWhitelist', 'write_hosts',
            array(
                'path' => $path,
                'hosts' => $hosts_allow
            )
        );

    }

    protected function duplicateError() 
    {
        echo "<h4 style='color:red'>IP is Duplicate.</h4>";
    }

    protected function notValidError() 
    {
        echo "<h4 style='color:red'>IP entered is invalid.</h4>";
    }
    protected function notValidPort() 
    {
        echo "<h4 style='color:red'>SSH config is invalid.</h4>";
    }
    
}
